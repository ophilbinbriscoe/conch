using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Text.RegularExpressions;
using Sirenix.OdinInspector;
using UnityEngine;
using UnityEngine.Networking;
using Newtonsoft.Json;

namespace Landline
{
	public static class NetUtil
	{
		public static string GetLocalAddress ()
		{
			IPHostEntry host;

			var address = "0.0.0.0";

			host = Dns.GetHostEntry( Dns.GetHostName() );

			foreach ( IPAddress ip in host.AddressList )
			{
				if ( ip.AddressFamily == AddressFamily.InterNetwork )
				{
					address = ip.ToString();
					break;
				}
			}

			return address;
		}

		public static int GetFreePort ()
		{
			var startingPort = 49152;

			var properties = IPGlobalProperties.GetIPGlobalProperties();

			//getting active connections
			var tcpConnectionPorts = properties.GetActiveTcpConnections()
								.Where( n => n.LocalEndPoint.Port >= startingPort )
								.Select( n => n.LocalEndPoint.Port );

			//getting active tcp listners - WCF service listening in tcp
			var tcpListenerPorts = properties.GetActiveTcpListeners()
								.Where( n => n.Port >= startingPort )
								.Select( n => n.Port );

			//getting active udp listeners
			var udpListenerPorts = properties.GetActiveUdpListeners()
								.Where( n => n.Port >= startingPort )
								.Select( n => n.Port );

			var port = Enumerable.Range( startingPort, ushort.MaxValue )
				.Where( i => !tcpConnectionPorts.Contains( i ) )
				.Where( i => !tcpListenerPorts.Contains( i ) )
				.Where( i => !udpListenerPorts.Contains( i ) )
				.FirstOrDefault();

			return port;
		}
	}
}
